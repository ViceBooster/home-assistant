blueprint:
  domain: automation
  name: "Sports: Score Monitor"
  description: 'This blueprint will flash one or more lights using the team colors
    provided by the API, triggered by any score change (optionally ignoring opponent
    scores).'
  input:
    teams:
      name: Teams
      description: Teams whose games you want to watch for score changes.
      selector:
        entity:
          integration: teamtracker
          multiple: true
    light_targets:
      name: Lights to flash
      description: Choose one or more lights.
      selector:
        entity:
          domain: light
          multiple: true
    activate_on_opponent_score:
      name: Activate on opponent score
      description: Enable to flash lights on any score change, disable to only activate
        when your team's score changes. Colors will be those of whichever team has
        scored, If the opponent scores a Boo sound will play.
      selector:
        select:
          options:
          - 'Yes'
          - 'No'
          mode: list
          sort: false
          custom_value: false
          multiple: false
      default: 'Yes'
    repeat_count:
      name: Repeat count
      description: How many times should the color cycle run?
      selector:
        number:
          min: 1.0
          max: 15.0
          mode: slider
          step: 1.0
      default: 3
    media_player_target:
      name: Media Player
      description: Select the media player to play the sound.
      selector:
        entity:
          domain: media_player
    media_content:
      name: Media Content ID
      description: The content ID for the sound to play.
      selector:
        text:
    volume_level:
      name: Volume Level
      description: Set the volume level for the media player.
      selector:
        number:
          min: 0.1
          max: 1.0
          mode: slider
          step: 0.1
      default: 0.8
    retry_counter:
      name: Retry Counter
      description: Counter for retrying light scene restoration if you have laggy lights like I do
      selector:
        number:
          min: 0
          max: 3
          mode: slider
          step: 1
      default: 0

variables:
  activate_on_opponent_score: !input activate_on_opponent_score
  boo_sound: "http://23.227.143.154/bbdown/Boo.mp3"

trigger:
- platform: state
  entity_id: !input teams
  attribute: team_score
  id: team_score
- platform: state
  entity_id: !input teams
  attribute: opponent_score
  id: oppo_score

condition:
- condition: template
  value_template: '{{ states(trigger.entity_id) == "IN" }}'
- condition: template
  value_template: '{{ (trigger.id != "oppo_score") or (activate_on_opponent_score == "Yes") }}'

action:
- choose:
  - conditions:
      - condition: template
        value_template: "{{ trigger.id == 'oppo_score' }}"
    sequence:
      - service: media_player.volume_set
        data:
          entity_id: !input media_player_target
          volume_level: !input volume_level
      - service: media_player.play_media
        data:
          entity_id: !input media_player_target
          media_content_id: "{{ boo_sound }}"
          media_content_type: music
  - conditions:
      - condition: template
        value_template: "{{ trigger.id == 'team_score' }}"
    sequence:
      - service: media_player.volume_set
        data:
          entity_id: !input media_player_target
          volume_level: !input volume_level
      - service: media_player.play_media
        data:
          entity_id: !input media_player_target
          media_content_id: !input media_content
          media_content_type: music
- service: scene.create
  data:
    snapshot_entities: !input light_targets
    scene_id: team_game_score_lights_capture

- repeat:
    count: 15  # since 30 seconds / 2 seconds per cycle = 15
    sequence:
      - service: light.turn_on
        data:
          rgb_color: >
            {% set color_str = "" %}
            {% if trigger.id != 'oppo_score' %}
              {% set color_str = state_attr(trigger.entity_id, 'team_colors')[0] %}
            {% else %}
              {% set color_str = state_attr(trigger.entity_id, 'opponent_colors')[0] %}
            {% endif %}
            {% if color_str %}
              {{ [color_str[1:3] | int(base=16), color_str[3:5] | int(base=16), color_str[5:7] | int(base=16)] }}
            {% else %}
              [255, 255, 255]  # default white color in case of None
            {% endif %}
        target:
          entity_id: !input light_targets

      - delay:
          seconds: 2

      - service: light.turn_on
        data:
          rgb_color: >
            {% set color_str = "" %}
            {% if trigger.id != 'oppo_score' %}
              {% set color_str = state_attr(trigger.entity_id, 'team_colors')[1] %}
            {% else %}
              {% set color_str = state_attr(trigger.entity_id, 'opponent_colors')[1] %}
            {% endif %}
            {% if color_str %}
              {{ [color_str[1:3] | int(base=16), color_str[3:5] | int(base=16), color_str[5:7] | int(base=16)] }}
            {% else %}
              [255, 255, 255]  # default white color in case of None
            {% endif %}
        target:
          entity_id: !input light_targets

      - delay:
          seconds: 2

- choose:
    - conditions:
        - condition: state
          entity_id: sensor.error_detector
          state: 'error_occurred'
      sequence:
        - service: input_number.increment
          target:
            entity_id: input_number.retry_counter
        - delay: "00:00:30" # Wait for 30 seconds before retrying
        - condition: numeric_state
          entity_id: input_number.retry_counter
          below: 3
        - service: scene.turn_on
          target:
            entity_id: scene.team_game_score_lights_capture

  default:
    - service: scene.turn_on
      target:
        entity_id: scene.team_game_score_lights_capture
    - service: input_number.set_value
      target:
        entity_id: input_number.retry_counter
      data:
        value: 0
