blueprint:
  domain: automation
  name: "Sports: Start Monitor"
  description: 'Flashes lights and plays media based with team colors provided by the API when the game starts. 
  This blueprint requires the ha-teamtracker intregration and at least one team setup as a sensor/intergration.
  '
  input:
    teams:
      name: Teams
      description: Teams whose games you want to monitor.
      selector:
        entity:
          integration: teamtracker
          multiple: true
    light_targets:
      name: Lights to flash
      description: Choose one or more lights.
      selector:
        target:
          entity:
            domain: light
    repeat_count:
      name: Repeat count
      description: How many times should the color cycle run?
      selector:
        number:
          min: 1.0
          max: 15.0
          mode: slider
          step: 1.0
      default: 3
    media_player_target:
      name: Media Player
      description: Select the media player to play the sound.
      selector:
        entity:
          domain: media_player
    media_content:
      name: Media Content ID
      description: The content ID for the sound to play.
      selector:
        text:
    volume_level:
      name: Volume Level
      description: Set the volume level for the media player.
      selector:
        number:
          min: 0.1
          max: 1.0
          mode: slider
          step: 0.1
      default: 0.8

trigger:
  - platform: state
    entity_id: !input teams
    to: 'IN'

action:
  - service: media_player.volume_set
    data:
      entity_id: !input media_player_target
      volume_level: !input volume_level
  - service: media_player.play_media
    data:
      entity_id: !input media_player_target
      media_content_id: !input media_content
      media_content_type: music
  - service: scene.create
    data:
      snapshot_entities: !input light_targets
      scene_id: team_game_start_lights_capture
  - repeat:
      count: !input repeat_count
      sequence:
        - service: light.turn_on
          data:
            rgb_color: >-
              {{ state_attr(trigger.entity_id, 'team_colors').split(", ")[0][1:3] | int(base=16) }},
              {{ state_attr(trigger.entity_id, 'team_colors').split(", ")[0][3:5] | int(base=16) }},
              {{ state_attr(trigger.entity_id, 'team_colors').split(", ")[0][5:7] | int(base=16) }}
          target: !input light_targets
        - delay:
            seconds: 1.5
        - service: light.turn_on
          data:
            rgb_color: >-
              {{ state_attr(trigger.entity_id, 'team_colors').split(", ")[1][1:3] | int(base=16) }},
              {{ state_attr(trigger.entity_id, 'team_colors').split(", ")[1][3:5] | int(base=16) }},
              {{ state_attr(trigger.entity_id, 'team_colors').split(", ")[1][5:7] | int(base=16) }}
          target: !input light_targets
        - delay:
            seconds: 1.5
  - service: scene.turn_on
    target:
      entity_id: scene.team_game_start_lights_capture
